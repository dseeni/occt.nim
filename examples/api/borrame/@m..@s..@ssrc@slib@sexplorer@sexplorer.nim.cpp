/* Generated by Nim Compiler v1.6.10 */
/* Compiled for: Linux, amd64, gcc */
/* Command for C compiler:
   g++ -c -std=gnu++14 -funsigned-char  -w -fmax-errors=3 -fpermissive -I/usr/include/opencascade/ -I/usr/import/opencascade/ -O3 -fno-strict-aliasing -fno-ident   -I/home/jose/.choosenim/toolchains/nim-1.6.10/lib -I/home/jose/src/nimlang/occt.nim/examples/api -o /home/jose/src/nimlang/occt.nim/examples/api/borrame/@m..@s..@ssrc@slib@sexplorer@sexplorer.nim.cpp.o /home/jose/src/nimlang/occt.nim/examples/api/borrame/@m..@s..@ssrc@slib@sexplorer@sexplorer.nim.cpp */
#define NIM_INTBITS 64

#include "nimbase.h"
#include "TopoDS_Face.hxx"
#include "TopoDS_Shape.hxx"
#include "TopExp_Explorer.hxx"
#include "TopAbs_ShapeEnum.hxx"
#include "TopoDS.hxx"
#include "Standard_Handle.hxx"
#include "Geom_Surface.hxx"
#include "Geom_Geometry.hxx"
#include "Standard_Transient.hxx"
#include "BRep_Tool.hxx"
#include "Geom_Plane.hxx"
#include "gp_Pnt.hxx"
#include "Geom_ElementarySurface.hxx"
#undef LANGUAGE_C
#undef MIPSEB
#undef MIPSEL
#undef PPC
#undef R3000
#undef R4000
#undef i386
#undef linux
#undef mips
#undef near
#undef far
#undef powerpc
#undef unix
#define nimfr_(x, y)
#define nimln_(x, y)
struct RootObj;
struct TNimType;
struct TNimNode;
typedef NU8 tyEnum_TNimKind__jIBKr1ejBgsfM33Kxw4j7A;
typedef NU8 tySet_tyEnum_TNimTypeFlag__v8QUszD1sWlSIWZz7mC4bQ;
typedef N_NIMCALL_PTR(void, tyProc__ojoeKfW4VYIm36I9cpDTQIg) (void* p, NI op);
typedef N_NIMCALL_PTR(void*, tyProc__WSm2xU5ARYv9aAR4l0z9c9auQ) (void* p);
struct TNimType {
NI size;
NI align;
tyEnum_TNimKind__jIBKr1ejBgsfM33Kxw4j7A kind;
tySet_tyEnum_TNimTypeFlag__v8QUszD1sWlSIWZz7mC4bQ flags;
TNimType* base;
TNimNode* node;
void* finalizer;
tyProc__ojoeKfW4VYIm36I9cpDTQIg marker;
tyProc__WSm2xU5ARYv9aAR4l0z9c9auQ deepcopy;
};
struct RootObj {
TNimType* m_type;
};
typedef opencascade::handle<Geom_Surface> TY__Nv8CuwQI9bu9bXCzGbZytEGw;
typedef opencascade::handle<Geom_Plane> TY__N31bfHM17sbp19byE9cYw8hw;
N_LIB_PRIVATE N_NIMCALL(NF, low__OOZOOZsrcZlibZexplorerZexplorer_44)(void);
N_LIB_PRIVATE N_NIMCALL(gp_Pnt, location__OOZOOZsrcZlibZgeomZgeom_42)(TY__N31bfHM17sbp19byE9cYw8hw aPlane);
N_LIB_PRIVATE N_NIMCALL(TY__N31bfHM17sbp19byE9cYw8hw, toPlane__OOZOOZsrcZlibZgeomZgeom_33)(TY__Nv8CuwQI9bu9bXCzGbZytEGw aSurface);
N_LIB_PRIVATE N_NIMCALL(TopoDS_Face, getPlaneZmax__OOZOOZsrcZlibZexplorerZexplorer_41)(TopoDS_Shape body) {
	TopoDS_Face result;
	NF T1_ = low__OOZOOZsrcZlibZexplorerZexplorer_44();
	NF zMax = T1_;
	{
		TopoDS_Face aFace;
		{
			TopoDS_Face face;
			TopExp_Explorer aFaceExplorer(body, ((TopAbs_ShapeEnum) 4), ((TopAbs_ShapeEnum) 8));
			{
				while (1) {
					NIM_BOOL T6_ = aFaceExplorer.More();
					if (!T6_) goto LA5;
					face = TopoDS::Face(aFaceExplorer.Current());
					TY__Nv8CuwQI9bu9bXCzGbZytEGw surface = BRep_Tool::Surface(face);
					{
						if (!(surface->DynamicType() == Geom_Plane::get_type_descriptor())) goto LA9_;
{						aFace = face;
						TY__N31bfHM17sbp19byE9cYw8hw T11_ = toPlane__OOZOOZsrcZlibZgeomZgeom_33(BRep_Tool::Surface(aFace));
						gp_Pnt T12_ = location__OOZOOZsrcZlibZgeomZgeom_42(T11_);
						gp_Pnt aPnt = T12_;
						float aZ = aPnt.Z();
						{
							if (!(zMax < ((NF) (aZ)))) goto LA15_;
{							zMax = ((NF) (aZ));
							result = aFace;
}						}
						LA15_: ;
}					}
					LA9_: ;
					aFaceExplorer.Next();
				} LA5: ;
			}
		}
	}
	return result;
}
