/* Generated by Nim Compiler v1.6.10 */
/* Compiled for: Linux, amd64, gcc */
/* Command for C compiler:
   g++ -c -std=gnu++14 -funsigned-char  -w -fmax-errors=3 -fpermissive -I/usr/include/opencascade/ -I/usr/import/opencascade/ -O3 -fno-strict-aliasing -fno-ident   -I/home/jose/.choosenim/toolchains/nim-1.6.10/lib -I/home/jose/src/nimlang/occt.nim/examples/api -o /home/jose/src/nimlang/occt.nim/examples/api/borrame/@m..@s..@ssrc@slib@sfoundation@siter.nim.cpp.o /home/jose/src/nimlang/occt.nim/examples/api/borrame/@m..@s..@ssrc@slib@sfoundation@siter.nim.cpp */
#define NIM_INTBITS 64

#include "nimbase.h"
#include "NCollection_List.hxx"
#include "TopoDS_Shape.hxx"
#include "NCollection_BaseList.hxx"
#include "TopoDS_Face.hxx"
#undef LANGUAGE_C
#undef MIPSEB
#undef MIPSEL
#undef PPC
#undef R3000
#undef R4000
#undef i386
#undef linux
#undef mips
#undef near
#undef far
#undef powerpc
#undef unix
#define nimfr_(x, y)
#define nimln_(x, y)
struct tySequence__p3ejDZUwgffAWrdMTTu9c7Q;
struct TGenericSeq;
struct NimStringDesc;
typedef NCollection_List<TopoDS_Shape> TY__GIqsjlKJHsTq0jbUI9bnu9aw;
struct TGenericSeq {
NI len;
NI reserved;
};
struct NimStringDesc : public TGenericSeq {
NIM_CHAR data[SEQ_DECL_SIZE];
};
struct tySequence__p3ejDZUwgffAWrdMTTu9c7Q : TGenericSeq {
  TopoDS_Face data[SEQ_DECL_SIZE];
};
N_LIB_PRIVATE N_NOINLINE(void, raiseIndexError2)(NI i, NI n);
N_LIB_PRIVATE N_NOINLINE(void, raiseOverflow)(void);
N_LIB_PRIVATE N_NIMCALL(void, failedAssertImpl__systemZassertions_56)(NimStringDesc* msg);
STRING_LITERAL(TM__bMx6re9cZQTEHkX9cHjpdyBQ_3, "iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it", 90);
N_LIB_PRIVATE N_NIMCALL(TY__GIqsjlKJHsTq0jbUI9bnu9aw, toTopTools_ListOfShape__sketcher50d954849_427)(tySequence__p3ejDZUwgffAWrdMTTu9c7Q* shapes) {
	TY__GIqsjlKJHsTq0jbUI9bnu9aw result;
	{
		TopoDS_Face* aShape;
		NI T2_;
		aShape = (TopoDS_Face*)0;
		NI i = ((NI) 0);
		T2_ = (shapes ? shapes->len : 0);
		NI L = T2_;
		{
			while (1) {
				NI TM__bMx6re9cZQTEHkX9cHjpdyBQ_2;
				if (!(i < L)) goto LA4;
				if (i < 0 || i >= (shapes ? shapes->len : 0)){ raiseIndexError2(i,(shapes ? shapes->len : 0)-1); }
				aShape = (&shapes->data[i]);
				TopoDS_Shape T5_ = result.Append((*aShape));
				if (nimAddInt(i, ((NI) 1), &TM__bMx6re9cZQTEHkX9cHjpdyBQ_2)) { raiseOverflow(); };
				i = (NI)(TM__bMx6re9cZQTEHkX9cHjpdyBQ_2);
				{
					NI T8_;
					T8_ = (shapes ? shapes->len : 0);
					if (!!((T8_ == L))) goto LA9_;
{					failedAssertImpl__systemZassertions_56(((NimStringDesc*) &TM__bMx6re9cZQTEHkX9cHjpdyBQ_3));
}				}
				LA9_: ;
			} LA4: ;
		}
	}
	return result;
}
