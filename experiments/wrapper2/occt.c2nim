#ifdef C2NIM
#skipinclude
#mangle Standard_Integer int
#mangle Standard_Real float
#mangle Standard_Boolean bool
#mangle Standard_True true
#mangle Standard_False false  
#prefix gp_
#def DEFINE_STANDARD_ALLOC
#def DEFINE_NCOLLECTION_ALLOC
#def Standard_EXPORT
#def Standard_NODISCARD 
#def Standard_OVERRIDE
#def STANDARD_TYPE(theType) theType::get_type_descriptor()
#def OCCT_CHECK_BASE_CLASS
#def TRUE_ (1)
#def FALSE_ (0)
#pp DEFINE_STANDARD_HANDLE
#pp DEFINE_HARRAY1
#pp DEFINE_STANDARD_HANDLECLASS
#pp Handle
#def DEFINE_STANDARD_RTTIEXT(Class,Base) \
      public: \
        typedef Base base_type; \
        static const char* get_type_name () { return #Class; } \
        Standard_EXPORT static const Handle(Standard_Type)& get_type_descriptor (); \
        Standard_EXPORT virtual const Handle(Standard_Type)& DynamicType() const Standard_OVERRIDE;

#def DEFINE_STANDARD_RTTI_INLINE(Class,Base) \
public: \
  typedef Base base_type; \
  static const char* get_type_name () { return #Class; OCCT_CHECK_BASE_CLASS(Class,Base) } \
  static const Handle(Standard_Type)& get_type_descriptor () { return Standard_Type::Instance<Class>(); } \
  virtual const Handle(Standard_Type)& DynamicType() const Standard_OVERRIDE { return get_type_descriptor (); }

#def DEFINE_NCOLLECTION_ALLOC                                               \
   void* operator new (size_t theSize,                                           \
                       const Handle(NCollection_BaseAllocator)& theAllocator)    \
   {                                                                             \
     return theAllocator->Allocate(theSize);                                     \
   }                                                                             \
   void  operator delete (void* theAddress,                                      \
                          const Handle(NCollection_BaseAllocator)& theAllocator) \
   {                                                                             \
     theAllocator->Free(theAddress);                                             \
   }

#endif