##  Created on: 2007-07-06
##  Created by: Pavel TELKOV
##  Copyright (c) 2007-2014 OPEN CASCADE SAS
##
##  This file is part of Open CASCADE Technology software library.
##
##  This library is free software; you can redistribute it and/or modify it under
##  the terms of the GNU Lesser General Public License version 2.1 as published
##  by the Free Software Foundation, with special exception defined in the file
##  OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
##  distribution for complete text of the license and disclaimer of any warranty.
##
##  Alternatively, this file may be used under the terms of Open CASCADE
##  commercial license or contractual agreement.

import
  ../Standard/Standard, ../Standard/Standard_Type, Message_ExecStatus,
  ../TColStd/TColStd_HArray1OfTransient, ../Standard/Standard_Transient,
  Message_Status, ../Standard/Standard_Integer, ../Standard/Standard_CString,
  ../Standard/Standard_Boolean, Message_Gravity,
  ../TCollection/TCollection_HAsciiString,
  ../TCollection/TCollection_HExtendedString,
  ../TColStd/TColStd_HSequenceOfHExtendedString,
  ../TColStd/TColStd_SequenceOfHExtendedString, Message_HArrayOfMsg

discard "forward decl of Message_Messenger"
discard "forward decl of TCollection_AsciiString"
discard "forward decl of TCollection_HAsciiString"
discard "forward decl of TCollection_ExtendedString"
discard "forward decl of TCollection_HExtendedString"
discard "forward decl of Message_Msg"
discard "forward decl of TColStd_HPackedMapOfInteger"
discard "forward decl of Message_Algorithm"
discard "forward decl of Message_Algorithm"
type
  Handle_Message_Algorithm* = handle[Message_Algorithm]

## ! Class Message_Algorithm is intended to be the base class for
## ! classes implementing algorithms or any operations that need
## ! to provide extended information on its execution to the
## ! caller / user.
## !
## ! It provides generic mechanism for management of the execution
## ! status, collection and output of messages.
## !
## ! The algorithm uses methods SetStatus() to set an execution status.
## ! It is possible to associate a status with a number or a string
## ! (second argument of SetStatus() methods) to indicate precisely
## ! the item (object, element etc.) in the input data which caused
## ! the problem.
## !
## ! Each execution status generated by the algorithm has associated
## ! text message that should be defined in the resouce file loaded
## ! with call to Message_MsgFile::LoadFile().
## !
## ! The messages corresponding to the statuses generated during the
## ! algorithm execution are output to Message_Messenger using
## ! methods SendMessages(). If status have associated numbers
## ! or strings, they are included in the message body in place of
## ! "%s" placeholder which should be present in the message text.
## !
## ! The name of the message text in the resource file is constructed
## ! from name of the class and name of the status, separated by dot,
## ! for instance:
## !
## ! .TObj_CheckModel.Alarm2
## ! Error: Some objects (%s) have references to dead object(s)
## !
## ! If message for the status is not found with prefix of
## ! the current class type, the same message is searched for the base
## ! class(es) recursively.
## !
## ! Message can be set explicitly for the status; in this case the
## ! above procedure is not used and supplied message is used as is.
## !
## ! The messages are output to the messenger, stored in the field;
## ! though messenger can be changed, it is guaranteed to be non-null.
## ! By default, Message::DefaultMessenger() is used.

type
  Message_Algorithm* {.importcpp: "Message_Algorithm",
                      header: "Message_Algorithm.hxx", bycopy.} = object of Standard_Transient ##
                                                                                        ## !
                                                                                        ## Empty
                                                                                        ## constructor


proc constructMessage_Algorithm*(): Message_Algorithm {.constructor,
    importcpp: "Message_Algorithm(@)", header: "Message_Algorithm.hxx".}
proc SetStatus*(this: var Message_Algorithm; theStat: Message_Status) {.
    importcpp: "SetStatus", header: "Message_Algorithm.hxx".}
proc SetStatus*(this: var Message_Algorithm; theStat: Message_Status;
               theInt: Standard_Integer) {.importcpp: "SetStatus",
    header: "Message_Algorithm.hxx".}
proc SetStatus*(this: var Message_Algorithm; theStat: Message_Status;
               theStr: Standard_CString;
               noRepetitions: Standard_Boolean = Standard_True) {.
    importcpp: "SetStatus", header: "Message_Algorithm.hxx".}
proc SetStatus*(this: var Message_Algorithm; theStat: Message_Status;
               theStr: TCollection_AsciiString;
               noRepetitions: Standard_Boolean = Standard_True) {.
    importcpp: "SetStatus", header: "Message_Algorithm.hxx".}
proc SetStatus*(this: var Message_Algorithm; theStat: Message_Status;
               theStr: handle[TCollection_HAsciiString];
               noRepetitions: Standard_Boolean = Standard_True) {.
    importcpp: "SetStatus", header: "Message_Algorithm.hxx".}
proc SetStatus*(this: var Message_Algorithm; theStat: Message_Status;
               theStr: TCollection_ExtendedString;
               noRepetitions: Standard_Boolean = Standard_True) {.
    importcpp: "SetStatus", header: "Message_Algorithm.hxx".}
proc SetStatus*(this: var Message_Algorithm; theStat: Message_Status;
               theStr: handle[TCollection_HExtendedString];
               noRepetitions: Standard_Boolean = Standard_True) {.
    importcpp: "SetStatus", header: "Message_Algorithm.hxx".}
proc SetStatus*(this: var Message_Algorithm; theStat: Message_Status;
               theMsg: Message_Msg) {.importcpp: "SetStatus",
                                    header: "Message_Algorithm.hxx".}
proc GetStatus*(this: Message_Algorithm): Message_ExecStatus {.noSideEffect,
    importcpp: "GetStatus", header: "Message_Algorithm.hxx".}
proc ChangeStatus*(this: var Message_Algorithm): var Message_ExecStatus {.
    importcpp: "ChangeStatus", header: "Message_Algorithm.hxx".}
proc ClearStatus*(this: var Message_Algorithm) {.importcpp: "ClearStatus",
    header: "Message_Algorithm.hxx".}
proc SetMessenger*(this: var Message_Algorithm; theMsgr: handle[Message_Messenger]) {.
    importcpp: "SetMessenger", header: "Message_Algorithm.hxx".}
proc GetMessenger*(this: Message_Algorithm): handle[Message_Messenger] {.
    noSideEffect, importcpp: "GetMessenger", header: "Message_Algorithm.hxx".}
proc SendStatusMessages*(this: Message_Algorithm; theFilter: Message_ExecStatus;
                        theTraceLevel: Message_Gravity = Message_Warning;
                        theMaxCount: Standard_Integer = 20) {.noSideEffect,
    importcpp: "SendStatusMessages", header: "Message_Algorithm.hxx".}
proc SendMessages*(this: Message_Algorithm;
                  theTraceLevel: Message_Gravity = Message_Warning;
                  theMaxCount: Standard_Integer = 20) {.noSideEffect,
    importcpp: "SendMessages", header: "Message_Algorithm.hxx".}
proc AddStatus*(this: var Message_Algorithm; theOther: handle[Message_Algorithm]) {.
    importcpp: "AddStatus", header: "Message_Algorithm.hxx".}
proc AddStatus*(this: var Message_Algorithm; theStatus: Message_ExecStatus;
               theOther: handle[Message_Algorithm]) {.importcpp: "AddStatus",
    header: "Message_Algorithm.hxx".}
proc GetMessageNumbers*(this: Message_Algorithm; theStatus: Message_Status): handle[
    TColStd_HPackedMapOfInteger] {.noSideEffect, importcpp: "GetMessageNumbers",
                                  header: "Message_Algorithm.hxx".}
proc GetMessageStrings*(this: Message_Algorithm; theStatus: Message_Status): handle[
    TColStd_HSequenceOfHExtendedString] {.noSideEffect,
    importcpp: "GetMessageStrings", header: "Message_Algorithm.hxx".}
proc PrepareReport*(theError: handle[TColStd_HPackedMapOfInteger];
                   theMaxCount: Standard_Integer): TCollection_ExtendedString {.
    importcpp: "Message_Algorithm::PrepareReport(@)",
    header: "Message_Algorithm.hxx".}
proc PrepareReport*(theReportSeq: TColStd_SequenceOfHExtendedString;
                   theMaxCount: Standard_Integer): TCollection_ExtendedString {.
    importcpp: "Message_Algorithm::PrepareReport(@)",
    header: "Message_Algorithm.hxx".}
type
  Message_Algorithmbase_type* = Standard_Transient

proc get_type_name*(): cstring {.importcpp: "Message_Algorithm::get_type_name(@)",
                              header: "Message_Algorithm.hxx".}
proc get_type_descriptor*(): handle[Standard_Type] {.
    importcpp: "Message_Algorithm::get_type_descriptor(@)",
    header: "Message_Algorithm.hxx".}
proc DynamicType*(this: Message_Algorithm): handle[Standard_Type] {.noSideEffect,
    importcpp: "DynamicType", header: "Message_Algorithm.hxx".}