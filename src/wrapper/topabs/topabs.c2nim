#ifdef C2NIM
#dynlib tkg3d
#cdecl
#prefix gp_
#assumendef _MSC_VER
#assumendef _DEBUG
#assumendef _WIN32
#assumedef No_Exception
#assumedef _Standard_Byte_HeaderFile
#assumedef _Standard_Integer_HeaderFile
#assumedef _Standard_JmpBuf_HeaderFile
#assumedef _Standard_Macro_HeaderFile
#assumedef _Standard_ShortReal_HeaderFile
#assumedef _Standard_Real_HeaderFile
#assumedef _Standard_Size_HeaderFile
#assumedef _Standard_Std_HeaderFile
#assumedef _Standard_Type_HeaderFile
#assumedef _NCollection_DefineAlloc_HeaderFile
#assumedef NCollection_DefineHArray1_HeaderFile
#assumedef NCollection_DefineHArray2_HeaderFile
#assumedef NCollection_DefineHSequence_HeaderFile
#assumedef NCollection_HSequence_HeaderFile
#assumedef NCollection_TypeDef_HeaderFile
#assumendef __has_cpp_attribute
#def DEFINE_STANDARD_ALLOC
#def Standard_EXPORT
#def Standard_OVERRIDE
#def Standard_NODISCARD
#def Standard_UNUSED
#def Standard_THREADLOCAL
#def Standard_DISABLE_DEPRECATION_WARNINGS
#def Standard_ENABLE_DEPRECATION_WARNINGS
#def Standard_Character cchar
#def Standard_CString cstring
#mangle Standard_Size csize_t
#mangle Standard_Address pointer
#mangle Standard_Integer cint
#mangle construct new
#def Standard_Integer int
#def Standard_Boolean bool
#def Standard_Real float
#def Standard_True true
#def Standard_False false
#def DEFINE_STANDARD_HANDLE(C1,C2) \
  typedef Handle(C1) Handle_##C1;
#def Handle(x) opencascade::handle<x>
#def DEFINE_STANDARD_HANDLE(C1,C2) \
  typedef Handle(C1) Handle_##C1;
#def DEFINE_STANDARD_PHANDLE(C1,C2) \
  typedef Handle(C1) Handle_##C1;
#def DEFINE_STANDARD_EXCEPTION(C1,C2) 
#def Standard_STATIC_ASSERT(theExpr) 
#assumendef OCCT_CLOCALE_POSIX2008
#assumendef OCCT_CLOCALE_POSIX2008
#assumedef _Standard_DefineAlloc_HeaderFile
#assumedef _Standard_DefineException_HeaderFile
#def OCCT_CLASS_NAME(theClass) #theClass
#def Standard_DEPRECATED(A)
#def DEFINE_STANDARD_RTTIEXT(Standard_Failure,Standard_Transient)
#assumedef OCCT_NO_RVALUE_REFERENCE
#def Standard_DEPRECATED
#def OCCT_NO_RVALUE_REFERENCE
#def DEFINE_STANDARD_RTTI_INLINE(Class,Base) \
public: \
  typedef Base base_type;
#def DEFINE_STANDARD_RTTIEXT(Class,Base) \
public: \
  typedef Base base_type; 
#def OCCT_CHECK_BASE_CLASS(Class,Base)
#def IMPLEMENT_STANDARD_RTTIEXT(Class,Base)
#pp OCC_VERSION_MAJOR
#pp OCC_VERSION_MINOR
#pp OCC_VERSION_MAINTENANCE 
#assumendef OCC_VERSION_DEVELOPMENT
#def DEFINE_NCOLLECTION_ALLOC
#def OCCT_DUMP_FIELD_VALUE_POINTER(A,B)
#def OCCT_DUMP_FIELD_VALUE_NUMERICAL(A,B)
#def TYPENAME typename
#def DEFINE_HARRAY1(HClassName, _Array1Type_)                               \
  class HClassName : public _Array1Type_, public Standard_Transient         \
  {                                                                         \
  public:                                                                   \
    HClassName (const Standard_Integer theLower,                            \
                const Standard_Integer theUpper);                           \
    HClassName (const Standard_Integer theLower,                            \
                const Standard_Integer theUpper,                            \
                const _Array1Type_::value_type& theValue);                  \
    HClassName  (const _Array1Type_& theOther);                             \
    const _Array1Type_& Array1 () const;                                    \
  };  
#def DEFINE_HARRAY2(HClassName, _Array2Type_)                               \
  class HClassName : public _Array2Type_, public Standard_Transient {       \
  public:                                                                   \
    HClassName  (const Standard_Integer theRowLow,                          \
                  const Standard_Integer theRowUpp,                         \
                  const Standard_Integer theColLow,                         \
                  const Standard_Integer theColUpp);                        \
    HClassName  (const Standard_Integer theRowLow,                          \
                  const Standard_Integer theRowUpp,                         \
                  const Standard_Integer theColLow,                         \
                  const Standard_Integer theColUpp,                         \
                  const _Array2Type_::value_type& theValue);                \
    HClassName  (const _Array2Type_& theOther);                             \
    const _Array2Type_& Array2 () const;                                    \
    _Array2Type_& ChangeArray2 ();                                          \
  };    

#def DEFINE_HSEQUENCE(HClassName, _SequenceType_)                           \
class HClassName : public _SequenceType_, public Standard_Transient {                \
 public:                                                                       \
   HClassName ();                                                           \
   HClassName (const _SequenceType_& theOther) ;  \
   const _SequenceType_& Sequence () const;                  \
   void Append (const _SequenceType_::value_type& theItem);        \
   void Append (_SequenceType_& theSequence) ;                  \
   _SequenceType_& ChangeSequence () ;       \
}; \
DEFINE_STANDARD_HANDLE (HClassName, Standard_Transient) 

#def IMPLEMENT_HSEQUENCE(HClassName)  
#def DEFINE_HEBTREE(_HEBTREE, _OBJTYPE, _BNDTYPE, _HUBTREE)          \
class _HEBTREE : public _HUBTREE                                        \
{                                                                       \
 public:                                                                \
  typedef NCollection_UBTree <_OBJTYPE, _BNDTYPE> UBTree;               \
  typedef NCollection_EBTree <_OBJTYPE, _BNDTYPE> EBTree;               \
                                                                        \
  _HEBTREE () : _HUBTREE(new EBTree);                                   \
  /* Empty constructor */                                               \
                                                                        \
  /* Access to the methods of EBTree */                                 \
                                                                        \
  Standard_Boolean Remove (const _OBJTYPE& theObj) ; \
                                                                        \
  Standard_Boolean Contains (const _OBJTYPE& theObj) const  ; \
                                                                        \
  const UBTree::TreeNode& FindNode (const _OBJTYPE& theObj) const  ; \
                                                                        \
  /* Access to the extended tree algorithm */                           \
                                                                        \
  const EBTree& ETree () const ; \
  EBTree&       ChangeETree () ;    \
                                                                        \
                                       \
                                                 \
};                                                                      \
DEFINE_STANDARD_HANDLE (_HEBTREE, _HUBTREE)
#def IMPLEMENT_HEBTREE(_HEBTREE, _HUBTREE)  
#def NCOLLECTION_HSEQUENCE(HClassName,Type)                                 \
 DEFINE_HSEQUENCE(HClassName,NCollection_Sequence<Type >)


#def DEFINE_HUBTREE(_HUBTREE, _OBJTYPE, _BNDTYPE, _HPARENT)          \
class _HUBTREE : public _HPARENT                                        \
{                                                                       \
 public:                                                                \
  typedef NCollection_UBTree <_OBJTYPE, _BNDTYPE> UBTree;               \
                                                                        \
  _HUBTREE () : myTree(new UBTree) {}                                   \
  /* Empty constructor */                                               \
  _HUBTREE (const Handle(NCollection_BaseAllocator)& theAlloc)           \
     : myTree(new UBTree(theAlloc)) {}                                  \
  /* Constructor */                                                     \
                                                                        \
  /* Access to the methods of UBTree */                                 \
                                                                        \
  Standard_Boolean Add (const _OBJTYPE& theObj,                         \
                        const _BNDTYPE& theBnd)                         \
        { return ChangeTree().Add (theObj, theBnd); }                   \
                                                                        \
  Standard_Integer Select (UBTree::Selector& theSelector) const         \
        { return Tree().Select (theSelector); }                         \
                                                                        \
  void Clear () { ChangeTree().Clear (); }                              \
                                                                        \
  Standard_Boolean IsEmpty () const { return Tree().IsEmpty(); }        \
                                                                        \
  const UBTree::TreeNode& Root () const { return Tree().Root(); }       \
                                                                        \
                                                                        \
  /* Access to the tree algorithm */                                    \
                                                                        \
  const UBTree& Tree () const { return *myTree; }                       \
  UBTree&       ChangeTree () { return *myTree; }                       \
                                                                        \
  ~_HUBTREE () { delete myTree; }                                       \
  /* Destructor */                                                      \
                                                                        \
  DEFINE_STANDARD_RTTI_INLINE(_HUBTREE,_HPARENT)                                       \
  /* Type management */                                                 \
                                                                        \
 private:                                                               \
  /* Copying and assignment are prohibited  */                          \
  _HUBTREE (UBTree*);                                                   \
  _HUBTREE (const _HUBTREE&);                                           \
  void operator = (const _HUBTREE&);                                    \
                                                                        \
 private:                                                               \
  UBTree       *myTree;        /* pointer to the tree algorithm */      \
};                                                                      \
DEFINE_STANDARD_HANDLE (_HUBTREE, _HPARENT)

#def NCOLLECTION_VEC_COMPONENTS_2D(theX, theY) \
  const NCollection_Vec2<Element_t> theX##theY() const; \
  const NCollection_Vec2<Element_t> theY##theX() const;

#def NCOLLECTION_VEC_COMPONENTS_3D(theX, theY, theZ) \
  const NCollection_Vec3<Element_t> theX##theY##theZ() const; \
  const NCollection_Vec3<Element_t> theX##theZ##theY() const; \
  const NCollection_Vec3<Element_t> theY##theX##theZ() const; \
  const NCollection_Vec3<Element_t> theY##theZ##theX() const; \
  const NCollection_Vec3<Element_t> theZ##theY##theX() const; \
  const NCollection_Vec3<Element_t> theZ##theX##theY() const;
  
#endif