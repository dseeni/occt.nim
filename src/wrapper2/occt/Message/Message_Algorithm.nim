##  Created on: 2007-07-06
##  Created by: Pavel TELKOV
##  Copyright (c) 2007-2014 OPEN CASCADE SAS
##
##  This file is part of Open CASCADE Technology software library.
##
##  This library is free software; you can redistribute it and/or modify it under
##  the terms of the GNU Lesser General Public License version 2.1 as published
##  by the Free Software Foundation, with special exception defined in the file
##  OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
##  distribution for complete text of the license and disclaimer of any warranty.
##
##  Alternatively, this file may be used under the terms of Open CASCADE
##  commercial license or contractual agreement.

discard "forward decl of Message_Messenger"
discard "forward decl of TCollection_AsciiString"
discard "forward decl of TCollection_HAsciiString"
discard "forward decl of TCollection_ExtendedString"
discard "forward decl of TCollection_HExtendedString"
discard "forward decl of Message_Msg"
discard "forward decl of TColStd_HPackedMapOfInteger"
discard "forward decl of Message_Algorithm"
discard "forward decl of Message_Algorithm"
type
  HandleMessageAlgorithm* = Handle[MessageAlgorithm]

## ! Class Message_Algorithm is intended to be the base class for
## ! classes implementing algorithms or any operations that need
## ! to provide extended information on its execution to the
## ! caller / user.
## !
## ! It provides generic mechanism for management of the execution
## ! status, collection and output of messages.
## !
## ! The algorithm uses methods SetStatus() to set an execution status.
## ! It is possible to associate a status with a number or a string
## ! (second argument of SetStatus() methods) to indicate precisely
## ! the item (object, element etc.) in the input data which caused
## ! the problem.
## !
## ! Each execution status generated by the algorithm has associated
## ! text message that should be defined in the resouce file loaded
## ! with call to Message_MsgFile::LoadFile().
## !
## ! The messages corresponding to the statuses generated during the
## ! algorithm execution are output to Message_Messenger using
## ! methods SendMessages(). If status have associated numbers
## ! or strings, they are included in the message body in place of
## ! "%s" placeholder which should be present in the message text.
## !
## ! The name of the message text in the resource file is constructed
## ! from name of the class and name of the status, separated by dot,
## ! for instance:
## !
## ! .TObj_CheckModel.Alarm2
## ! Error: Some objects (%s) have references to dead object(s)
## !
## ! If message for the status is not found with prefix of
## ! the current class type, the same message is searched for the base
## ! class(es) recursively.
## !
## ! Message can be set explicitly for the status; in this case the
## ! above procedure is not used and supplied message is used as is.
## !
## ! The messages are output to the messenger, stored in the field;
## ! though messenger can be changed, it is guaranteed to be non-null.
## ! By default, Message::DefaultMessenger() is used.

type
  MessageAlgorithm* {.importcpp: "Message_Algorithm",
                     header: "Message_Algorithm.hxx", bycopy.} = object of StandardTransient ##
                                                                                      ## !
                                                                                      ## Empty
                                                                                      ## constructor


proc constructMessageAlgorithm*(): MessageAlgorithm {.constructor,
    importcpp: "Message_Algorithm(@)", header: "Message_Algorithm.hxx".}
proc setStatus*(this: var MessageAlgorithm; theStat: MessageStatus) {.
    importcpp: "SetStatus", header: "Message_Algorithm.hxx".}
proc setStatus*(this: var MessageAlgorithm; theStat: MessageStatus;
               theInt: StandardInteger) {.importcpp: "SetStatus",
                                        header: "Message_Algorithm.hxx".}
proc setStatus*(this: var MessageAlgorithm; theStat: MessageStatus;
               theStr: StandardCString;
               noRepetitions: StandardBoolean = standardTrue) {.
    importcpp: "SetStatus", header: "Message_Algorithm.hxx".}
proc setStatus*(this: var MessageAlgorithm; theStat: MessageStatus;
               theStr: TCollectionAsciiString;
               noRepetitions: StandardBoolean = standardTrue) {.
    importcpp: "SetStatus", header: "Message_Algorithm.hxx".}
proc setStatus*(this: var MessageAlgorithm; theStat: MessageStatus;
               theStr: Handle[TCollectionHAsciiString];
               noRepetitions: StandardBoolean = standardTrue) {.
    importcpp: "SetStatus", header: "Message_Algorithm.hxx".}
proc setStatus*(this: var MessageAlgorithm; theStat: MessageStatus;
               theStr: TCollectionExtendedString;
               noRepetitions: StandardBoolean = standardTrue) {.
    importcpp: "SetStatus", header: "Message_Algorithm.hxx".}
proc setStatus*(this: var MessageAlgorithm; theStat: MessageStatus;
               theStr: Handle[TCollectionHExtendedString];
               noRepetitions: StandardBoolean = standardTrue) {.
    importcpp: "SetStatus", header: "Message_Algorithm.hxx".}
proc setStatus*(this: var MessageAlgorithm; theStat: MessageStatus; theMsg: MessageMsg) {.
    importcpp: "SetStatus", header: "Message_Algorithm.hxx".}
proc getStatus*(this: MessageAlgorithm): MessageExecStatus {.noSideEffect,
    importcpp: "GetStatus", header: "Message_Algorithm.hxx".}
proc changeStatus*(this: var MessageAlgorithm): var MessageExecStatus {.
    importcpp: "ChangeStatus", header: "Message_Algorithm.hxx".}
proc clearStatus*(this: var MessageAlgorithm) {.importcpp: "ClearStatus",
    header: "Message_Algorithm.hxx".}
proc setMessenger*(this: var MessageAlgorithm; theMsgr: Handle[MessageMessenger]) {.
    importcpp: "SetMessenger", header: "Message_Algorithm.hxx".}
proc getMessenger*(this: MessageAlgorithm): Handle[MessageMessenger] {.noSideEffect,
    importcpp: "GetMessenger", header: "Message_Algorithm.hxx".}
proc sendStatusMessages*(this: MessageAlgorithm; theFilter: MessageExecStatus;
                        theTraceLevel: MessageGravity = messageWarning;
                        theMaxCount: StandardInteger = 20) {.noSideEffect,
    importcpp: "SendStatusMessages", header: "Message_Algorithm.hxx".}
proc sendMessages*(this: MessageAlgorithm;
                  theTraceLevel: MessageGravity = messageWarning;
                  theMaxCount: StandardInteger = 20) {.noSideEffect,
    importcpp: "SendMessages", header: "Message_Algorithm.hxx".}
proc addStatus*(this: var MessageAlgorithm; theOther: Handle[MessageAlgorithm]) {.
    importcpp: "AddStatus", header: "Message_Algorithm.hxx".}
proc addStatus*(this: var MessageAlgorithm; theStatus: MessageExecStatus;
               theOther: Handle[MessageAlgorithm]) {.importcpp: "AddStatus",
    header: "Message_Algorithm.hxx".}
proc getMessageNumbers*(this: MessageAlgorithm; theStatus: MessageStatus): Handle[
    TColStdHPackedMapOfInteger] {.noSideEffect, importcpp: "GetMessageNumbers",
                                 header: "Message_Algorithm.hxx".}
proc getMessageStrings*(this: MessageAlgorithm; theStatus: MessageStatus): Handle[
    TColStdHSequenceOfHExtendedString] {.noSideEffect,
                                        importcpp: "GetMessageStrings",
                                        header: "Message_Algorithm.hxx".}
proc prepareReport*(theError: Handle[TColStdHPackedMapOfInteger];
                   theMaxCount: StandardInteger): TCollectionExtendedString {.
    importcpp: "Message_Algorithm::PrepareReport(@)",
    header: "Message_Algorithm.hxx".}
proc prepareReport*(theReportSeq: TColStdSequenceOfHExtendedString;
                   theMaxCount: StandardInteger): TCollectionExtendedString {.
    importcpp: "Message_Algorithm::PrepareReport(@)",
    header: "Message_Algorithm.hxx".}
type
  MessageAlgorithmbaseType* = StandardTransient

proc getTypeName*(): cstring {.importcpp: "Message_Algorithm::get_type_name(@)",
                            header: "Message_Algorithm.hxx".}
proc getTypeDescriptor*(): Handle[StandardType] {.
    importcpp: "Message_Algorithm::get_type_descriptor(@)",
    header: "Message_Algorithm.hxx".}
proc dynamicType*(this: MessageAlgorithm): Handle[StandardType] {.noSideEffect,
    importcpp: "DynamicType", header: "Message_Algorithm.hxx".}

